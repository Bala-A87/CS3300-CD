//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   boolean build;
   boolean printDebug;
   HashMap<String, String> parents;
   HashMap<String, HashMap<String, String>> classMembers;
   HashMap<String, HashMap<String, HashMap<String, String>>> classMethods;
   HashMap<String, HashMap<String, ArrayList<String>>> methodSignatures;
   HashMap<String, HashMap<String, String>> returnTypes;
   HashMap<String, HashMap<String, HashMap<String, String>>> localVars;
   Stack<String> scope;
   ArrayList<String> actualParams;

    public GJDepthFirst() {
      build = true;
      printDebug = false;
      parents = new HashMap<String, String>();
      classMembers = new HashMap<String, HashMap<String, String>>();
      classMethods = new HashMap<String, HashMap<String, HashMap<String, String>>>();
      methodSignatures = new HashMap<String, HashMap<String, ArrayList<String>>>();
      returnTypes = new HashMap<String, HashMap<String, String>>();
      localVars = new HashMap<String, HashMap<String, HashMap<String, String>>>();
      scope = new Stack<String>();
      actualParams = new ArrayList<String>();
    }

    public String getType(String varName, String className, String methodName) {
      String currClass = className;
      while(currClass != null) {
         if(methodName != null) {
            if(localVars.get(currClass).get(methodName).containsKey(varName))
               return localVars.get(currClass).get(methodName).get(varName);
            if(classMethods.get(currClass).get(methodName).containsKey(varName))
               return classMethods.get(currClass).get(methodName).get(varName);
         }
         if(classMembers.get(currClass).containsKey(varName))
         return classMembers.get(currClass).get(varName);
         currClass = parents.get(currClass);
      }
      return null;
    }

    public String getClassScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return scope.get(scope.size()-2);
      return currScope;
    }

    public String getMethodScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return currScope;
      return null;
    }

    public boolean classExists(String className) {
      return parents.containsKey(className);
    }

    public boolean methodExists(String className, String methodName) {
      String currClass = className;
      while(currClass != null) {
         if(classMethods.get(className).containsKey(methodName))
            return true;
         currClass = parents.get(currClass);
      }
      return false;
    }

    public ArrayList<String> getFormalParams(String className, String methodName) {
      String currClass = className;
      while(currClass != null) {
         if(classMethods.get(className).containsKey(methodName))
            break;
         currClass = parents.get(currClass);
      }
      return methodSignatures.get(className).get(methodName);
    }

    public boolean accepts(String upperClass, String lowerClass) {
      String currClass = lowerClass;
      while(currClass != null) {
         if(currClass.equals(upperClass))
            return true;
         currClass = parents.get(currClass);
      }
      return false;
    }

    public boolean noOverloading(String className, String methodName) {
      String ancestorClass = parents.get(className);
      String currReturnType = returnTypes.get(className).get(methodName);
      ArrayList<String> currParams = methodSignatures.get(className).get(methodName);
      while(ancestorClass != null) {
         if(classMethods.get(ancestorClass).containsKey(methodName)) {
            String ancestorReturnType = returnTypes.get(ancestorClass).get(methodName);
            ArrayList<String> ancestorParams = methodSignatures.get(ancestorClass).get(methodName);
            if(!currReturnType.equals(ancestorReturnType) || currParams.size() != ancestorParams.size())
               return false;
            for(int i = 0; i < currParams.size(); i++)
               if(!currParams.get(i).equals(ancestorParams.get(i)))
                  return false;
         }
         ancestorClass = parents.get(ancestorClass);
      }
      return true;
    }

    public void FAILURE() {
      System.out.println("Type error");
      System.exit(0);
    }
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      build = false;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      parents.put(className, null);
      scope.push(className);
      if(build) {
         classMembers.put(className, new HashMap<String, String>());
         classMethods.put(className, new HashMap<String, HashMap<String, String>>());
         methodSignatures.put(className, new HashMap<String, ArrayList<String>>());
         returnTypes.put(className, new HashMap<String, String>());
         localVars.put(className, new HashMap<String, HashMap<String, String>>());
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String methodName = "main()";
      scope.push(methodName);
      if(build) {
         classMethods.get(className).put(methodName, new HashMap<String, String>());
         methodSignatures.get(className).put(methodName, new ArrayList<String>());
         returnTypes.get(className).put(methodName, "void");
         localVars.get(className).put(methodName, new HashMap<String, String>());
      }
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String varName = (String)n.f11.accept(this, argu);
      if(build) {
         classMethods.get(className).get(methodName).put(varName, "String[]");
         methodSignatures.get(className).get(methodName).add("String[]");
      }
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      scope.pop();
      n.f16.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      scope.push(className);
      if(build) {
         if(classExists(className)) {
            if(printDebug) System.out.println("Class " + className + " already exists");
            FAILURE();
         }
         classMembers.put(className, new HashMap<String, String>());
         classMethods.put(className, new HashMap<String, HashMap<String, String>>());
         methodSignatures.put(className, new HashMap<String, ArrayList<String>>());
         returnTypes.put(className, new HashMap<String, String>());
         localVars.put(className, new HashMap<String, HashMap<String, String>>());
         parents.put(className, null);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      String parentName = (String)n.f3.accept(this, argu);
      scope.push(className);
      if(build) {
         if(classExists(className)) {
            if(printDebug) System.out.println("Class " + className + " already exists");
            FAILURE();
         }
         String ancestorName = parentName;
         while(ancestorName != null) {
            if(ancestorName.equals(className)) {
               if(printDebug) System.out.println("Cyclic extension found");
               FAILURE();
            }
            ancestorName = parents.get(ancestorName);
         }
         classMembers.put(className, new HashMap<String, String>());
         classMethods.put(className, new HashMap<String, HashMap<String, String>>());
         methodSignatures.put(className, new HashMap<String, ArrayList<String>>());
         returnTypes.put(className, new HashMap<String, String>());
         localVars.put(className, new HashMap<String, HashMap<String, String>>());
         parents.put(className, parentName);
      }
      if(!build && !classExists(parentName)) {
         if(printDebug) System.out.println("Parent class doesn't exist for " + className);
         FAILURE();
      }
      n.f2.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String idType = (String)n.f0.accept(this, argu);
      String idName = (String)n.f1.accept(this, argu);
      if(build) {
         String classScope = getClassScope();
         String methodScope = getMethodScope();
         if(methodScope == null) { //Currently in a class
            if(classMembers.get(classScope).containsKey(idName)) {
               if(printDebug) System.out.println("Member " + idName + " already exists in " + classScope);
               FAILURE();
            }
            else
               classMembers.get(classScope).put(idName, idType);
         }
         else { //Currently in a method => methodDeclaration type rules needed
            if(localVars.get(classScope).get(methodScope).containsKey(idName)) {
               if(printDebug) System.out.println("Method " + methodScope + " of " + classScope + " already has local variable " + idName);
               FAILURE();
            }
            localVars.get(classScope).get(methodScope).put(idName, idType);
         }
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String methodType = (String)n.f1.accept(this, argu);
      String methodName = (String)n.f2.accept(this, argu) + "()";
      String currClass = (String)getClassScope();
      if(build) {
         if(methodExists(currClass, methodName)) {
            if(printDebug) System.out.println("Method " + methodName + " already exists in " + currClass);
            FAILURE();
         }
         classMethods.get(currClass).put(methodName, new HashMap<String, String>());
         methodSignatures.get(currClass).put(methodName, new ArrayList<String>());
         returnTypes.get(currClass).put(methodName, methodType);
         localVars.get(currClass).put(methodName, new HashMap<String, String>());
      }
      else {
         if(!noOverloading(currClass, methodName)) {
            if(printDebug) System.out.println("Overloading of " + methodName + " in " + currClass);
            FAILURE();
         }
      }
      scope.push(methodName);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String returnType = (String)n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(!build && !accepts(methodType, returnType)) 
      {
         if(printDebug) System.out.println("Method type != Return type");
         FAILURE();
      }
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String className = getClassScope();
      String methodName = getMethodScope();
      String paramType = (String)n.f0.accept(this, argu);
      String paramName = (String)n.f1.accept(this, argu);
      if(build) {
         if(classMethods.get(className).get(methodName).containsKey(paramName)) {
            if(printDebug) System.out.println("Method " + methodName + " of " + className + " already has parameter " + paramName);
            FAILURE();
         }
         classMethods.get(className).get(methodName).put(paramName, paramType);
         methodSignatures.get(className).get(methodName).add(paramType);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu); 
      if(!build && !accepts(getType(varName, getClassScope(), getMethodScope()), exprType))
      {
         if(printDebug) System.out.println("Identifier = Expression;");
         FAILURE();
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String indexType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rhsType = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!build && !("int[]".equals(getType(varName, getClassScope(), getMethodScope())) && "int".equals(indexType) && "int".equals(rhsType)))
      {
         if(printDebug) System.out.println("Identifier[Expression] = Expression;");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !"boolean".equals(exprType))
      {
         if(printDebug) System.out.println("if(Expression) Statement");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!build && !"boolean".equals(exprType))
      {
         if(printDebug) System.out.println("if(Expression) Statement else Statement");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !"boolean".equals(exprType))
      {
         if(printDebug) System.out.println("while(Expression) Statement");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !"int".equals(exprType))
      { 
         if(printDebug) System.out.println("System.out.println(Expression);");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      A temp = argu;
      argu = null;
      _ret = n.f0.accept(this, argu);
      argu = temp;
      if(!build && "ActualParams".equals((String)argu)) 
         actualParams.add((String)_ret);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"boolean".equals(type1) || !"boolean".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression&&PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"boolean".equals(type1) || !"boolean".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression||PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression<=PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) { //Criteria??
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression!=PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression+PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression-PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression*PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && (!"int".equals(type1) || !"int".equals(type2)))
      {
         if(printDebug) System.out.println("PrimaryExpression/PrimaryExpression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String arrayType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!build && (!"int[]".equals(arrayType) || !"int".equals(exprType)))
      {
         if(printDebug) System.out.println("PrimaryExpression[PrimaryExpression]");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String exprType = (String)n.f0.accept(this, argu);
      if(!build && !"int[]".equals(exprType))
      {
         if(printDebug) System.out.println("PrimaryExpression.length");
         FAILURE();
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) { //***Method calls***
		/* YOUR CODE HERE */

      R _ret=null;
      ArrayList<String> tempStore = new ArrayList<String>(actualParams);
      String exprType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String methodName = (String)n.f2.accept(this, argu) + "()"; 
      if(!build) {
         if(!classExists(exprType))
         {
            if(printDebug) System.out.println("Method call - class " + exprType + " DNE");
            FAILURE();
         }
         if(!methodExists(exprType, methodName))
         {
            if(printDebug) System.out.println("Method call - method " + methodName + " DNE in " + exprType);
            FAILURE();
         }
         _ret = (R)returnTypes.get(exprType).get(methodName);
         actualParams.clear();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu); 
      if(!build) {
         ArrayList<String> formalParams = getFormalParams(exprType, methodName);
         if(formalParams.size() != actualParams.size())
         {
            if(printDebug) System.out.println("Method call - number of arguments don't match: formal - " + formalParams.size() + ", actual - " + actualParams.size());
            FAILURE();
         }
         for(int i = 0; i < formalParams.size(); i++)
            if(!accepts(formalParams.get(i), actualParams.get(i))) 
            {
               if(printDebug) {
                  System.out.println("Method call - " + methodName + ": argument " + (i+1) + " doesn't match");
                  System.out.println("Expected argument: " + formalParams.get(i));
                  System.out.println("Received argument: " + actualParams.get(i));
               }
               FAILURE();
            }
         actualParams = new ArrayList<String>(tempStore);
      }
      n.f5.accept(this, argu); 
      return _ret; //Return the method's return type
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      A temp = argu;
      argu = (A)"ActualParams";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      argu = temp;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      A temp = argu;
      argu = (A)"PrimaryExpression";
      _ret = n.f0.accept(this, argu);
      argu = temp;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      if(!build && "PrimaryExpression".equals((String)argu))
         _ret = (R)getType((String)_ret, getClassScope(), getMethodScope());
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(!build)
         _ret = (R)getClassScope();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprType = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !"int".equals(exprType))
      {
         if(printDebug) System.out.println("new int[Expression()]");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      A temp = argu;
      argu = null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      argu = temp;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!build) {
         if(!classExists(className))
         {
            if(printDebug) System.out.println("new Identifier()");
            FAILURE();
         }
         else
            _ret = (R)className;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      String exprType = (String)n.f1.accept(this, argu);
      if(!build && !"boolean".equals(exprType))
      {
         if(printDebug) System.out.println("!Expression");
         FAILURE();
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
