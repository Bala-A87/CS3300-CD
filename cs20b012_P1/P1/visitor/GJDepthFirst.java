//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   boolean build;
   HashMap<String, String> parents;
   HashMap<String, HashMap<String, String>> classMembers;
   HashMap<String, HashMap<String, HashMap<String, String>>> classMethods;
   HashMap<String, HashMap<String, String>> returnTypes;
   HashMap<String, HashMap<String, HashMap<String, String>>> localVars;
   Stack<String> scope;

    public GJDepthFirst() {
      build = true;
      parents = new HashMap<String, String>();
      classMembers = new HashMap<String, HashMap<String, String>>();
      classMethods = new HashMap<String, HashMap<String, HashMap<String, String>>>();
      returnTypes = new HashMap<String, HashMap<String, String>>();
      localVars = new HashMap<String, HashMap<String, HashMap<String, String>>>();
      scope = new Stack<String>();
    }

    public String getType(String varName, String className, String methodName) {
      String currClass = className;
      while(!currClass.equals(null)) {
         if(!methodName.equals(null)) {
            if(localVars.get(currClass).get(methodName).containsKey(varName))
               return localVars.get(currClass).get(methodName).get(varName);
            if(classMethods.get(currClass).get(methodName).containsKey(varName))
               return classMethods.get(currClass).get(methodName).get(varName);
         }
         if(classMembers.get(currClass).containsKey(varName))
         return classMembers.get(currClass).get(varName);
         currClass = parents.get(currClass);
      }
      return null;
    }

    public String getClassScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return scope.get(2);
      return currScope;
    }

    public String getMethodScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return currScope;
      return null;
    }

    public boolean classExists(String className) {
      return parents.containsKey(className);
    }

    public void FAILURE() {
      System.out.println("Type error");
      System.exit(0);
    }
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      build = false;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // for(HashMap.Entry<String, String> entry: parents.entrySet())
      //    System.out.println(entry.getKey() + ": " + entry.getValue());
      // for(HashMap.Entry<String, HashMap<String, String>> entry: classMembers.entrySet()) {
      //    System.out.println("Members of " + entry.getKey() + ":");
      //    for(HashMap.Entry<String, String> members: entry.getValue().entrySet())
      //       System.out.println(members.getKey() + ": " + members.getValue());
      // }
      // for(HashMap.Entry<String, HashMap<String, HashMap<String, String>>> entry: classMethods.entrySet()) {
      //    System.out.println("Methods of " + entry.getKey() + ":");
      //    for(HashMap.Entry<String, HashMap<String, String>> methods: entry.getValue().entrySet()) {
      //       System.out.println("Method name: " + methods.getKey());
      //       for(HashMap.Entry<String, String> params: methods.getValue().entrySet())
      //          System.out.println(params.getKey() + ": " + params.getValue());
      //    }
      // }
      // for(HashMap.Entry<String, HashMap<String, String>> entry: returnTypes.entrySet()) {
      //    System.out.println("Methods of " + entry.getKey() + ":");
      //    for(HashMap.Entry<String, String> methods: entry.getValue().entrySet())
      //       System.out.println(methods.getKey() + ": " + methods.getValue());
      // }
      // for(HashMap.Entry<String, HashMap<String, HashMap<String, String>>> entry: localVars.entrySet()) {
      //    System.out.println("Methods of " + entry.getKey() + ":");
      //    for(HashMap.Entry<String, HashMap<String, String>> methods: entry.getValue().entrySet()) {
      //       System.out.println("Method name: \nLocal variables:" + methods.getKey());
      //       for(HashMap.Entry<String, String> vars: methods.getValue().entrySet())
      //          System.out.println(vars.getKey() + ": " + vars.getValue());
      //    }
      // }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         String className = (String)n.f1.accept(this, argu);
         parents.put(className, null);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         // String varName = (String)
         n.f11.accept(this, argu);
         // objects.put(varName, "String");
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      scope.push(className);
      if(build) {
         classMembers.put(className, new HashMap<String, String>());
         classMethods.put(className, new HashMap<String, HashMap<String, String>>());
         returnTypes.put(className, new HashMap<String, String>());
         localVars.put(className, new HashMap<String, HashMap<String, String>>());
         parents.put(className, null);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      String parentName = (String)n.f3.accept(this, argu);
      scope.push(className);
      if(build) {
         classMembers.put(className, new HashMap<String, String>());
         classMethods.put(className, new HashMap<String, HashMap<String, String>>());
         returnTypes.put(className, new HashMap<String, String>());
         localVars.put(className, new HashMap<String, HashMap<String, String>>());
         parents.put(className, parentName);
      }
      n.f2.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String idType = (String)n.f0.accept(this, argu);
      String idName = (String)n.f1.accept(this, argu);
      String currScope = scope.peek();
      //Ensure that it is a class. How?
      if(build) {
         if(currScope.charAt(currScope.length()-1) != ')')
            classMembers.get(currScope).put(idName, idType);
         else {
            String methodName = currScope;
            scope.pop();
            String className = scope.peek();
            localVars.get(className).get(methodName).put(idName, idType);
            scope.push(methodName);
         }
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String methodType = (String)n.f1.accept(this, argu);
      String methodName = (String)n.f2.accept(this, argu) + "()";
      if(build) {
         classMethods.get(scope.peek()).put(methodName, new HashMap<String, String>());
         returnTypes.get(scope.peek()).put(methodName, methodType);
         localVars.get(scope.peek()).put(methodName, new HashMap<String, String>());
      }
      scope.push(methodName);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String returnType = (String)n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(!build && !methodType.equals(returnType))
         FAILURE();
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String methodName = scope.peek();
      scope.pop();
      String className = scope.peek();
      scope.push(methodName);
      String paramType = (String)n.f0.accept(this, argu);
      String paramName = (String)n.f1.accept(this, argu);
      if(build) {
         classMethods.get(className).get(methodName).put(paramName, paramType);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      if(!build && !exprType.equals(getType(varName, getClassScope(), getMethodScope())))
         FAILURE();
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String varName = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String indexType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rhsType = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!build && !getType(varName, getClassScope(), getMethodScope()).equals("int[]") && !indexType.equals("int") && !rhsType.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !exprType.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!build && !exprType.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !exprType.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !exprType.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("boolean") && !type2.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("boolean") && !type2.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("int") && !type2.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) { //Criteria??
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("int") && !type2.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("int") && !type2.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("int") && !type2.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      if(!build && !type1.equals("int") && !type2.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String arrayType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!build && !arrayType.equals("int[]") && !exprType.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String exprType = (String)n.f0.accept(this, argu);
      if(!build && !exprType.equals("int[]"))
         FAILURE();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      argu = (A)"PrimaryExpression";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      if(!build && ((String)argu).equals("PrimaryExpression"))
         _ret = (R)getType((String)_ret, getClassScope(), getMethodScope());
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(!build)
         _ret = (R)getClassScope();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprType = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!build && !exprType.equals("int"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!build) {
         if(!classExists(className))
            FAILURE();
         else
            _ret = (R)className;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      String exprType = (String)n.f1.accept(this, argu);
      if(!build && !exprType.equals("boolean"))
         FAILURE();
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
