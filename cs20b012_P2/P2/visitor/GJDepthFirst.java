//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

// Try debugging by adding print statements to the .java file to run

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

    HashMap<String, ClassRecord> classTable;
    Stack<String> scope;
    boolean build;
    MethodRecord currRecord;
    int labelNo;
    int tempNo;
    HashMap<String, Integer> tempMap;
    HashMap<Integer, String> typeMap;
    ArrayList<Integer> actualParams;
    HashMap<Integer, Boolean> hasAddress;

    public GJDepthFirst() {
      classTable = new HashMap<String, ClassRecord>();
      scope = new Stack<String>();
      build = true;
      currRecord = null;
      labelNo = 0;
      tempNo = 0;
      tempMap = new HashMap<String, Integer>();
      typeMap = new HashMap<Integer, String>();
      actualParams = new ArrayList<Integer>();
      hasAddress = new HashMap<Integer, Boolean>();
    }

    void addClass(String className, String parentName) {
      classTable.put(className, new ClassRecord(className, parentName));
    }

    public String getClassScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return scope.get(scope.size()-2);
      return currScope;
    }

    public String getMethodScope() {
      String currScope = scope.peek();
      if(currScope.charAt(currScope.length()-1) == ')')
         return currScope;
      return null;
    }

    int buildClass(String className) {
      int functionTableSize = 4*classTable.get(className).methodCount;
      int objectSize = 4 + classTable.get(className).size();
      System.out.println("MOVE TEMP " + tempNo++ + " " + functionTableSize);
      System.out.println("MOVE TEMP " + tempNo + " HALLOCATE TEMP " + (tempNo-1));
      int functionTableLoc = tempNo;
      tempNo++;
      for(HashMap.Entry<String, Integer> entry: classTable.get(className).allMethods.entrySet()) {
         System.out.println("MOVE TEMP " + tempNo + " " + className + "_" + entry.getKey());
         System.out.println("HSTORE TEMP " + functionTableLoc + " " + (4*entry.getValue()) + " TEMP " + tempNo);
         tempNo++;
      }
      System.out.println("MOVE TEMP " + tempNo++ + " " + objectSize);
      System.out.println("MOVE TEMP " + tempNo + " HALLOCATE TEMP " + (tempNo-1));
      System.out.println("HSTORE TEMP " + tempNo + " 0 TEMP " + functionTableLoc);
      // Try allocating heap space for the members too
      int objectLoc = tempNo;
      tempNo++;
      ArrayList<String> memberTypes = classTable.get(className).allMemberTypes;
      for(int i = 0; i < memberTypes.size(); i++) {
         int memberSize;
         String memberType = memberTypes.get(i);
         if(memberType.equals("int") || memberType.equals("boolean") || memberType.equals("int[]")) memberSize = 4;
         else memberSize = 4 + 4*classTable.get(memberType).size();
         System.out.println("MOVE TEMP " + tempNo++ + " " + memberSize);
         System.out.println("MOVE TEMP " + tempNo + " HALLOCATE TEMP " + (tempNo-1));
         System.out.println("HSTORE TEMP " + objectLoc + " " + (4*(i+1)) + " TEMP " + tempNo);
         tempNo++;
      }
      typeMap.put(objectLoc, className);
      hasAddress.put(objectLoc, true);
      return objectLoc;
    }

    int obtainVariable(String varName) {
      if(tempMap.containsKey(varName)) return tempMap.get(varName);
      return -1;
    }

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // Handle NPEs in build mode

      for(HashMap.Entry<String, ClassRecord> entry: classTable.entrySet()) {
         entry.getValue().calculateSize();
         entry.getValue().countMethods();
      }

      // System.out.println("Build complete");

      // for(HashMap.Entry<String, ClassRecord> entry: classTable.entrySet())
      //    entry.getValue().printRecord(); 

      build = false;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         String className = (String)n.f1.accept(this, argu);
         addClass(className, "");
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      else {
         System.out.println("MAIN");
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println("END");
      }

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      if(build) addClass(className, "");
      scope.push(className);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String parentName = (String)n.f3.accept(this, argu);
      if(build) addClass(className, parentName);
      scope.push(className);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         String idType = (String)n.f0.accept(this, argu);
         String idName = (String)n.f1.accept(this, argu);
         String classScope = getClassScope();
         String methodScope = getMethodScope();
         if(methodScope == null) classTable.get(classScope).addMember(idName, idType);
         n.f2.accept(this, argu);
      }
      else {
         String idType = (String)n.f0.accept(this, argu);
         String idName = (String)n.f1.accept(this, argu);
         // Check if in method or not
         if(getMethodScope() != null) {
            System.out.println("MOVE TEMP " + tempNo + " 0");
            tempMap.put(idName, tempNo);
            typeMap.put(tempNo, idType);
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         String className = getClassScope();
         n.f0.accept(this, argu);
         String returnType = (String)n.f1.accept(this, argu);
         String methodName = (String)n.f2.accept(this, argu);
         currRecord = new MethodRecord(methodName, returnType);
         scope.push(methodName+"()");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         classTable.get(className).addMethod(currRecord);
         scope.pop();
      }
      else {
         String className = getClassScope();
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String methodName = (String)n.f2.accept(this, argu);
         System.out.print(className + "_" + methodName + " [");
         ArrayList<String> params = classTable.get(className).getParams(methodName);
         ArrayList<String> paramTypes = classTable.get(className).getParamTypes(methodName);
         tempNo = 1 + params.size();
         System.out.print(tempNo);
         System.out.println("]");
         System.out.println("BEGIN");
         tempMap = new HashMap<String, Integer>();
         typeMap = new HashMap<Integer, String>();
         hasAddress = new HashMap<Integer, Boolean>();
         tempMap.put("this", 0);
         typeMap.put(0, className);
         hasAddress.put(0, true);
         for(int i = 0; i < params.size(); i++) {
            tempMap.put(params.get(i), i+1);
            typeMap.put(i+1, paramTypes.get(i));
            hasAddress.put(i+1, false);
         }
         ArrayList<String> classMembers = classTable.get(className).allMembers;
         ArrayList<String> classMembersTypes = classTable.get(className).allMemberTypes;
         for(int i = 0; i < classMembers.size(); i++) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP 0 " + (4*(i+1)));
            tempMap.put(classMembers.get(i), tempNo);
            typeMap.put(tempNo, classMembersTypes.get(i));
            hasAddress.put(tempNo, true);
            tempNo++;
         }
         scope.push(methodName+"()");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         int retExp = (int)n.f10.accept(this, argu);
         System.out.println("RETURN TEMP " + retExp);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         scope.pop();
         if(!build) System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         String paramType = (String)n.f0.accept(this, argu);
         String paramName = (String)n.f1.accept(this, argu);
         currRecord.addParam(paramName, paramType);
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else {
         String idName = (String)n.f0.accept(this, argu);
         int idLoc = obtainVariable(idName);
         n.f1.accept(this, argu);
         int exp = (int)n.f2.accept(this, argu);
         if(hasAddress.get(idLoc))
            System.out.println("HSTORE TEMP " + idLoc + " 0 TEMP " + exp);
         else
            System.out.println("MOVE TEMP " + idLoc + " TEMP " + exp);
         n.f3.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else {
         String idName = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int index = (int)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         int exp = (int)n.f5.accept(this, argu);
         int idLoc = obtainVariable(idName);
         System.out.println("MOVE TEMP " + tempNo++ + " PLUS TEMP " + idLoc + " TEMP " + index);
         System.out.println("MOVE TEMP " + tempNo++ + " 4");
         System.out.println("MOVE TEMP " + tempNo + " TIMES TEMP " + (tempNo-1) + " TEMP " + (tempNo-2));
         System.out.println("HSTORE TEMP " + tempNo + " 0 TEMP " + exp);
         tempNo++;
         n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         int currLabel = labelNo;
         labelNo++;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int exp = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            typeMap.put(tempNo, typeMap.get(exp));
            exp = tempNo;
            tempNo++;
         }
         System.out.println("CJUMP TEMP " + exp + " L" + currLabel);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("L" + currLabel);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else {
         int currLabel = labelNo;
         labelNo += 2;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int exp = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            typeMap.put(tempNo, typeMap.get(exp));
            exp = tempNo;
            tempNo++;
         }
         System.out.println("CJUMP TEMP " + exp + " L" + currLabel);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("JUMP L" + (currLabel+1));
         System.out.println("L" + currLabel);
         System.out.println("NOOP");
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println("L" + (currLabel+1));
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         int currLabel = labelNo;
         labelNo += 2;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         System.out.println("L" + currLabel);
         System.out.println("NOOP");
         int exp = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            typeMap.put(tempNo, typeMap.get(exp));
            exp = tempNo;
            tempNo++;
         }
         System.out.println("CJUMP TEMP " + exp + " L" + (currLabel+1));
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("JUMP L" + currLabel);
         System.out.println("L" + (currLabel+1));
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int exp = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            exp = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("PRINT TEMP " + exp);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "boolean");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "boolean");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " TIMES TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "boolean");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "boolean");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo++ + " PLUS TEMP " + exp1 + " TEMP " + exp2);
         System.out.println("MOVE TEMP " + tempNo++ + " TIMES TEMP " + exp1 + " TEMP " + exp2);
         System.out.println("MOVE TEMP " + tempNo + " MINUS TEMP " + (tempNo-2) + " TEMP " + (tempNo-1));
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " LE TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " NE TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " PLUS TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " MINUS TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " TIMES TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp1 = (int)n.f0.accept(this, argu);
         if(hasAddress.get(exp1)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp1 + " 0");
            exp1 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f1.accept(this, argu);
         int exp2 = (int)n.f2.accept(this, argu);
         if(hasAddress.get(exp2)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp2 + " 0");
            exp2 = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo + " DIV TEMP " + exp1 + " TEMP " + exp2);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else {
         int exp = (int)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int index = (int)n.f2.accept(this, argu);
         if(hasAddress.get(index)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + index + " 0");
            index = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f3.accept(this, argu);
         System.out.println("MOVE TEMP " + tempNo++ + " PLUS TEMP " + exp + " TEMP " + index);
         System.out.println("MOVE TEMP " + tempNo++ + " 4");
         System.out.println("MOVE TEMP " + tempNo + " TIMES TEMP " + (tempNo-1) + " TEMP " + (tempNo-2));
         tempNo++;
         System.out.println("HLOAD TEMP " + tempNo + " TEMP " + (tempNo-1) + " 0");
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int exp = (int)n.f0.accept(this, argu);
         System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      else {
         int callObj = (int)n.f0.accept(this, argu);
         String callObjClass = typeMap.get(callObj);
         n.f1.accept(this, argu);
         String methodName = (String)n.f2.accept(this, argu);
         // Identify the method
         int methodTemp = classTable.get(callObjClass).findMethod(methodName); //change
         // This is the position of the method in the class's function table
         System.out.println("HLOAD TEMP " + tempNo++ + " TEMP " + callObj + " 0");
         System.out.println("HLOAD TEMP " + tempNo + " TEMP " + (tempNo-1) + " " + methodTemp);
         methodTemp = tempNo;
         tempNo++;
         // This print needs to be later too, so store the required tempNo and increment
         // Maybe keep an ArrayList (global) of what the TEMPs are for the arguments
         ArrayList<Integer> tempStoreParams = new ArrayList<Integer>(actualParams);
         actualParams = new ArrayList<Integer>();
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         System.out.print("MOVE TEMP " + tempNo + " CALL TEMP " + methodTemp + " ( TEMP " + callObj + " ");
         for(Integer actualParam: actualParams) System.out.print("TEMP " + actualParam + " ");
         System.out.println(")");
         actualParams = new ArrayList<Integer>(tempStoreParams);
         _ret = (R)((Integer)tempNo);
         // Add return type and temp to typeMap
         typeMap.put(tempNo, classTable.get(callObjClass).getReturnType(methodName));
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else {
         int exp = (int)n.f0.accept(this, argu);
         // System.out.print("TEMP " + exp + " ");
         actualParams.add(exp);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         int exp = (int)n.f1.accept(this, argu);
         // System.out.print("TEMP " + exp + " ");
         actualParams.add(exp);
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret = n.f0.accept(this, argu);
      if(!build) {
         // Find a different way to check if Identifier
         int idCheck = obtainVariable(_ret.toString());
         if(idCheck != -1) _ret = (R)((Integer)idCheck);
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      int val = Integer.parseInt((String)n.f0.accept(this, argu));
      if(!build) {
         System.out.println("MOVE TEMP " + tempNo + " " + val);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) {
         System.out.println("MOVE TEMP " + tempNo + " 1");
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) {
         System.out.println("MOVE TEMP " + tempNo + " 0");
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) _ret = (R)((Integer)0);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int exp = (int)n.f3.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            exp = tempNo;
            typeMap.put(tempNo, "int");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         n.f4.accept(this, argu);
         System.out.println("MOVE TEMP " + tempNo++ + " 1");
         System.out.println("MOVE TEMP " + tempNo + " PLUS TEMP " + exp + " TEMP " + (tempNo-1));
         tempNo++;
         System.out.println("MOVE TEMP " + tempNo++ + " 4");
         System.out.println("MOVE TEMP " + tempNo + " TIMES TEMP " + (tempNo-1) + " TEMP " + (tempNo-2));
         tempNo++;
         System.out.println("MOVE TEMP " + tempNo + " HALLOCATE TEMP " + (tempNo-1));
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "int[]");
         hasAddress.put(tempNo, true);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      if(!build) {
         _ret = (R)((Integer)buildClass(className));
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         int exp = (int)n.f1.accept(this, argu);
         if(hasAddress.get(exp)) {
            System.out.println("HLOAD TEMP " + tempNo + " TEMP " + exp + " 0");
            exp = tempNo;
            typeMap.put(tempNo, "boolean");
            hasAddress.put(tempNo, false);
            tempNo++;
         }
         System.out.println("MOVE TEMP " + tempNo++ + " 1");
         System.out.println("MOVE TEMP " + tempNo + " MINUS TEMP " + (tempNo-1) + " TEMP " + exp);
         _ret = (R)((Integer)tempNo);
         typeMap.put(tempNo, "boolean");
         hasAddress.put(tempNo, false);
         tempNo++;
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      R exp = n.f1.accept(this, argu);
      if(!build) _ret = exp;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   class ClassRecord {
      String name, parentName;
      ArrayList<MethodRecord> functionTable;
      ArrayList<String> memberNames;
      ArrayList<String> memberTypes;
      int size, methodCount;
      boolean sizeCalculated;
      HashMap<String, Integer> allMethods;
      ArrayList<String> allMembers, allMemberTypes;
   
      ClassRecord(String name, String parent) {
         this.name = new String(name);
         this.parentName = new String(parent);
         functionTable = new ArrayList<MethodRecord>();
         memberNames = new ArrayList<String>();
         memberTypes = new ArrayList<String>();
         size = 0;
         methodCount = 0;
         sizeCalculated = false;
         allMethods = new HashMap<String, Integer>();
         allMembers = new ArrayList<String>();
         allMemberTypes = new ArrayList<String>();
      }
   
      void addMember(String memberName, String memberType) {
         memberNames.add(memberName);
         memberTypes.add(memberType);
      }
   
      void addMethod(MethodRecord method) {
         functionTable.add(method);
      }
   
      void calculateSize() {
         // Call after building to get size of record
         if(sizeCalculated) return;
         getAllMembers();
         size = 4 * allMembers.size();
         sizeCalculated = true;
      }
   
      void countMethods() {
         // Call after building to get total number of methods
         int count = 0;
         String className = name;
         while(!className.equals("")) {
            ClassRecord currClass = classTable.get(className);
            for(MethodRecord method: currClass.functionTable)
               if(!allMethods.containsKey(method.name)) {
                  allMethods.put(method.name, count);
                  count++;
               }

            className = currClass.parentName;
         }
         methodCount = count;
      }

      ArrayList<String> getParams(String methodName) {
         String className = name;
         while(!className.equals("")) {
            ClassRecord currClass = classTable.get(className);
            for(MethodRecord method: currClass.functionTable)
               if(methodName.equals(method.name)) return method.paramNames;
            className = currClass.parentName;
         }
         return null;
      }

      ArrayList<String> getParamTypes(String methodName) {
         String className = name;
         while(!className.equals("")) {
            ClassRecord currClass = classTable.get(className);
            for(MethodRecord method: currClass.functionTable)
               if(methodName.equals(method.name)) return method.paramTypes;
            className = currClass.parentName;
         }
         return null;
      }

      void getAllMembers() {
         allMembers = new ArrayList<String>(memberNames);
         allMemberTypes = new ArrayList<String>(memberTypes);
         if(!parentName.equals("")) {
            classTable.get(parentName).getAllMembers();
            ArrayList<String> parentMembers = classTable.get(parentName).allMembers;
            ArrayList<String> parentMemberTypes = classTable.get(parentName).allMemberTypes;
            // for(String member: parentMembers) allMembers.add(member);
            for(int i = 0; i < parentMembers.size(); i++) {
               allMembers.add(parentMembers.get(i));
               allMemberTypes.add(parentMemberTypes.get(i));
            }
         }
      }

      int findMember(String memberName) {
         for(int i = 0; i < allMembers.size(); i++) 
            if(memberName.equals(allMembers.get(i)))
               return i;
         return -1;
      }

      int findMethod(String methodName) {
         return 4*allMethods.get(methodName);
      }

      String getReturnType(String methodName) {
         String className = name;
         while(!name.equals("")) {
            ClassRecord currClass = classTable.get(className);
            for(MethodRecord method: currClass.functionTable) 
               if(methodName.equals(method.name)) return method.returnType;
            className = currClass.parentName;
         }
         return "";
      }
      
      int size() { return size; }
   
      void printRecord() {
         System.out.println("Class " + name + " extends " + parentName);
         System.out.println("Size: " + size);
         System.out.println("Members:");
         for(int i = 0; i < memberNames.size(); i++)
            System.out.println(memberNames.get(i) + ": " + memberTypes.get(i));
         System.out.println("Methods: (count = " + methodCount + ")");
         for(MethodRecord method: functionTable) method.printRecord();
         System.out.println("\n");
      }
   }
   
   class MethodRecord {
      String name, returnType;
      ArrayList<String> paramNames;
      ArrayList<String> paramTypes;
   
      MethodRecord(String name, String returnType) {
         this.name = new String(name);
         this.returnType = new String(returnType);
         paramNames = new ArrayList<String>();
         paramTypes = new ArrayList<String>();
      }
   
      void addParam(String paramName, String paramType) {
         paramNames.add(paramName);
         paramTypes.add(paramType);
      }
   
      void printRecord() {
         System.out.println(name);
         for(String param: paramNames) System.out.print(param + " ");
         System.out.println("");
      }
   }
   

}


