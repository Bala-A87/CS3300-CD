//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

//import jdk.nashorn.internal.codegen.SpillObjectCreator;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   boolean build;
   final String[] REGISTERS = {
      "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7",
      "t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"
   };
   String currScope;
   HashMap<String, HashMap<Integer, String>> allocatedRegisters;
   HashMap<String, HashMap<Integer, Integer>> spillValue;
   HashMap<String, Integer> noSpilled;
   HashMap<Integer, BasicBlock> stmtMap;
   int stmtNo;
   HashMap<String, ArrayList<String>> procedureCalls;
   HashMap<String, Integer> callArgs;
   int currNoOfArgs;
   int currSpilled;
   int argsPassed;

   public GJDepthFirst() {
      build = true;
      currScope = "MAIN";
      allocatedRegisters = new HashMap<String, HashMap<Integer, String>>();
      spillValue = new HashMap<String, HashMap<Integer, Integer>>();
      noSpilled = new HashMap<String, Integer>();
      stmtMap = new HashMap<Integer, BasicBlock>();
      stmtNo = 0;
      procedureCalls = new HashMap<String, ArrayList<String>>();
      callArgs = new HashMap<String, Integer>();
      currNoOfArgs = 0;
      currSpilled = 0;
      argsPassed = 0;
   }

   public void recordUse(int tempNo) {
      stmtMap.get(stmtNo).addUse(tempNo);
   }

   public void recordDef(int tempNo) {
      stmtMap.get(stmtNo).addDef(tempNo);
   }

   public void causeSpill(int spillCount) {
      noSpilled.put(currScope, noSpilled.get(currScope) + spillCount);
   }

   public void allocateRegister(int tempNo) {
      if(allocatedRegisters.get(currScope).size() < REGISTERS.length && !allocatedRegisters.get(currScope).containsKey(tempNo))
         allocatedRegisters.get(currScope).put(tempNo, REGISTERS[allocatedRegisters.get(currScope).size()]);
      else if(!allocatedRegisters.get(currScope).containsKey(tempNo) && !spillValue.get(currScope).containsKey(tempNo)) {
         spillValue.get(currScope).put(tempNo, noSpilled.get(currScope));
         causeSpill(1);
      }
   }

   public int maxCallArgs(String procedureName) {
      int ans = 0;
      for(String calledProcedure : procedureCalls.get(procedureName)) {
         int currCallArgs = callArgs.get(calledProcedure);
         if(currCallArgs > ans) ans = currCallArgs;
      }
      return ans;
   }

   public String spillStatus(String procedureName) {
      if(spillValue.get(procedureName).isEmpty()) return "NOTSPILLED";
      return "SPILLED";
   }

   public int getSpillLocation(int tempNo) {
      if(tempNo < callArgs.get(currScope)) return tempNo-4;
      return spillValue.get(currScope).get(tempNo);
   }

   public String getRegister(int tempNo) {
      if(allocatedRegisters.get(currScope).containsKey(tempNo)) return allocatedRegisters.get(currScope).get(tempNo);
      if(stmtMap.get(stmtNo).v0 == tempNo) return "v0";
      return "v1";
   }

   public String getCallArg(int tempNo) {
      if(allocatedRegisters.get(currScope).containsKey(tempNo)) return allocatedRegisters.get(currScope).get(tempNo);
      System.out.println("ALOAD v0 SPILLEDARG " + Integer.toString(spillValue.get(currScope).get(tempNo)));
      return "v0";
   }

   public void passCallArg(int tempNo) {
      String registerToPass = getCallArg(tempNo);
      if(argsPassed < 4) System.out.println("MOVE a" + Integer.toString(argsPassed) + " " + registerToPass);
      else System.out.println("PASSARG " + Integer.toString(argsPassed-3) + " " + registerToPass);
      argsPassed++;
   }

   public void calleeSave() {
      for(int i = 0; i < 8; i++) {
         System.out.println("ASTORE SPILLEDARG " + Integer.toString(currSpilled) + " s" + Integer.toString(i));
         currSpilled++;
      }
   }

   public void callerSave() {
      for(int i = 0; i < 10; i++) {
         System.out.println("ASTORE SPILLEDARG " + Integer.toString(currSpilled) + " t" + Integer.toString(i));
         currSpilled++;
      }
   }

   public void calleeRestore() {
      for(int i = 0; i < 8; i++) {
         System.out.println("ALOAD s" + Integer.toString(i) + " SPILLEDARG " + Integer.toString(currSpilled));
         currSpilled++;
      }
   }

   public void callerRestore() {
      for(int i = 0; i < 10; i++) {
         System.out.println("ALOAD t" + Integer.toString(i) + " SPILLEDARG " + Integer.toString(currSpilled));
         currSpilled++;
      }
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      if(build) {
         String procedureName = (String)n.f0.accept(this, argu);  
         currScope = new String(procedureName);
         allocatedRegisters.put(currScope, new HashMap<Integer, String>());
         spillValue.put(currScope, new HashMap<Integer, Integer>());
         procedureCalls.put(currScope, new ArrayList<String>());
         n.f1.accept(this, argu);
         // currNoOfArgs = (int)((Integer)n.f2.accept(this, argu));
         currNoOfArgs = Integer.parseInt((String)n.f2.accept(this, argu));
         if(currNoOfArgs > 4) {
            noSpilled.put(currScope, currNoOfArgs-4);
            for(int i = 0; i < 4; i++) allocateRegister(i);
         }
         else {
            noSpilled.put(currScope, 0);
            for(int i = 0; i < currNoOfArgs; i++) allocateRegister(i);
         }
         causeSpill(8);
         callArgs.put(currScope, currNoOfArgs);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         String procedureName = (String)n.f0.accept(this, (A)"NON-NULL");  
         currScope = new String(procedureName);
         n.f1.accept(this, argu);
         // currNoOfArgs = (int)((Integer)n.f2.accept(this, argu));
         currNoOfArgs = Integer.parseInt((String)n.f2.accept(this, argu));
         n.f3.accept(this, argu);
         int maxInternalArgs = maxCallArgs(procedureName);
         int spilledInside = noSpilled.get(procedureName);
         System.out.println(procedureName + " [" + Integer.toString(currNoOfArgs) + "] [" + Integer.toString(spilledInside) + "] [" + Integer.toString(maxInternalArgs) + "]");
         // Handle count of spilled args due to function calls
         n.f4.accept(this, argu);
      }

      return _ret;
   }

//
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      allocatedRegisters.put(currScope, new HashMap<Integer, String>());
      spillValue.put(currScope, new HashMap<Integer, Integer>());
      procedureCalls.put(currScope, new ArrayList<String>());
      noSpilled.put(currScope, 0);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);      

      build = false;
      currScope = new String("MAIN");
      currNoOfArgs = 0;
      stmtNo = 0;
      int maxInternalArgs = maxCallArgs("MAIN");
      int spilledInside = noSpilled.get("MAIN");

      System.out.println("MAIN [0] [" + Integer.toString(spilledInside) + "] [" + Integer.toString(maxInternalArgs) + "]");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);      

      System.out.println("END");
      System.out.println("// " + spillStatus("MAIN"));

      n.f3.accept(this, argu);
      n.f4.accept(this, argu); 


      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;  
      stmtNo++;
      if(build) {
         stmtMap.put(stmtNo, new BasicBlock());
         n.f0.accept(this, argu);  
      }    
      else {
         BasicBlock currBasicBlock = stmtMap.get(stmtNo);
         currBasicBlock.checkLoadReq();
         // Check v0 and v1 and load if required
         n.f0.accept(this, argu); 
         System.out.println("");
      }
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) System.out.print("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) System.out.print("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         recordUse(tempNo);
         n.f2.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         String label = (String)n.f2.accept(this, (A)"NON-NULL");
         System.out.print("CJUMP " + getRegister(tempNo) + " " + label + " ");
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String)n.f1.accept(this, (A)"NON-NULL");
      if(!build) System.out.print("JUMP " + label + " ");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         int memBase = (int)((Integer)n.f1.accept(this, argu));
         recordUse(memBase);
         n.f2.accept(this, argu);
         int tempNo = (int)((Integer)n.f3.accept(this, argu));
         recordUse(tempNo);
      }
      else {
         n.f0.accept(this, argu);
         int memBase = (int)((Integer)n.f1.accept(this, argu));
         // int offset = (int)((Integer)n.f2.accept(this, argu));
         int offset = Integer.parseInt((String)n.f2.accept(this, argu));
         int tempNo = (int)((Integer)n.f3.accept(this, argu));
         System.out.print("HSTORE " + getRegister(memBase) + " " + Integer.toString(offset) + " " + getRegister(tempNo) + " ");
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         recordDef(tempNo);
         int memBase = (int)((Integer)n.f2.accept(this, argu));
         recordUse(memBase);
         n.f3.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         int memBase = (int)((Integer)n.f2.accept(this, argu));
         // int offset = (int)((Integer)n.f3.accept(this, argu));
         int offset = Integer.parseInt((String)n.f3.accept(this, argu));
         System.out.print("HLOAD " + getRegister(tempNo) + " " + getRegister(memBase) + " " + Integer.toString(offset) + " ");
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         recordDef(tempNo);
         n.f2.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         // System.out.print("MOVE " + getRegister(tempNo) + " "); //call requires handling!!!!
         n.f2.accept(this, (A)("MOVE " + getRegister(tempNo) + " "));
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);      
      if(!build) {
         String simpleExp = (String)n.f1.accept(this, argu); 
         System.out.print("PRINT " + simpleExp + " ");
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         // Store callee-saved registers
         calleeSave();
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String simpleExp = (String)n.f3.accept(this, argu);
         System.out.println("MOVE v0 " + simpleExp);
         n.f4.accept(this, argu);
         // Load callee-saved registers
         calleeRestore();
         System.out.println("END");
         System.out.println("// " + spillStatus(currScope));
      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      
      if(build) {
         causeSpill(10);
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         // passedArgs = 0;
         n.f3.accept(this, argu);
         // if(passedArgs > 4) causeSpill(passedArgs-4);
         n.f4.accept(this, argu);
      }
      else {
         callerSave();
         // Maybe keep an ArrayList to handle arguments to call?
         // Why? Just keep a counter and move to ai or passarg
         n.f0.accept(this, argu);
         String procedureToCall = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         argsPassed = 0;
         n.f3.accept(this, (A)"CALL");
         n.f4.accept(this, argu);
         System.out.println("CALL " + procedureToCall);
         callerRestore();
         System.out.print((String)argu + "v0 ");
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!build) {
         String simpleExp = (String)n.f1.accept(this, argu);
         System.out.print((String)argu + "HALLOCATE " + simpleExp + " ");
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      if(build) {
         n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         recordUse(tempNo);
         n.f2.accept(this, argu);
      }
      else {
         String operator = (String)n.f0.accept(this, argu);
         int tempNo = (int)((Integer)n.f1.accept(this, argu));
         String simpleExp = (String)n.f2.accept(this, argu);
         System.out.print((String)argu + operator + " " + getRegister(tempNo) + " " + simpleExp + " ");
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=n.f0.accept(this, (A)"NON-NULL");
      // Try using which here
      if(build) {
         if(n.f0.which == 0) recordUse((Integer)_ret);
      }
      else {
         if(n.f0.which == 0) {
            int tempNo = (Integer)_ret;
            _ret = (R)(getRegister(tempNo));
         }
         // else if(n.f0.which == 1) {
         //    _ret = (R)Integer.toString((Integer)_ret);
         // }
         if(argu != null)
            System.out.print((String)argu + (String)_ret + " ");
      }
      return _ret;
      
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // int tempNo = (int)((Integer)n.f1.accept(this, argu));
      int tempNo = Integer.parseInt((String)n.f1.accept(this, argu));
      // _ret = n.f1.accept(this, argu);
      // int tempNo = Integer.parseInt((String)_ret);
      if(build) {
         allocateRegister(tempNo);
         // if("CALL".equals((String)argu)) passedArgs++;
      }
      else {
         // Do the work
         if("CALL".equals((String)argu)) passCallArg(tempNo);
      }
      _ret = (R)((Integer)tempNo);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=n.f0.accept(this, argu);
      if(!build) 
         if(argu == null) System.out.println((String)_ret);
      return _ret;
   }

   class BasicBlock {
      ArrayList<Integer> use, def;
      int v0, v1;

      public BasicBlock() {
         use = new ArrayList<Integer>();
         def = new ArrayList<Integer>();
         v0 = -1;
         v1 = -1;
      }

      public void addUse(int usedTemp) {
         use.add(usedTemp);
      }

      public void addDef(int defTemp) {
         def.add(defTemp);
      }

      public void checkLoadReq() {
         for(int usedTemp : use) {
            if(!allocatedRegisters.get(currScope).containsKey(usedTemp)) {
               if(v0 == -1) {
                  v0 = usedTemp;
                  int spillLoc = getSpillLocation(usedTemp);
                  System.out.println("ALOAD v0 SPILLEDARG " + Integer.toString(spillLoc)); //get spill value, could be spilled argument or regular spill
               }
               else {
                  v1 = usedTemp;
                  int spillLoc = getSpillLocation(usedTemp);
                  System.out.println("ALOAD v1 SPILLEDARG " + Integer.toString(spillLoc));
               }
            }
         }
      }
   }
}
